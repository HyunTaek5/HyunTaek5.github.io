# Site
repository: HyunTaek5/HyunTaek5.github.io
favicon: images/favicon.ico

# Content configuration version
version: 2

# Personal info
name: 오현택
title: NodeJS 백엔드 엔지니어
email: oht1312@gmail.com
website: https://eight20.tistory.com

# Dark Mode (true/false/never)
darkmode: true

# Social links
#twitter_username: facespics
github_username: HyunTaek5
# stackoverflow_username: "00000001"
# dribbble_username: jekyll
# facebook_username: jekyll
# flickr_username: jekyll
instagram_username: 5hyaen
linkedin_username: dylanoh
# xing_username: jekyll
# pinterest_username: jekyll
#youtube_username: globalmtb
# googleplus_username: +jekyll
# orcid_username: 0000-0000-0000-0000

# Additional icon links
#additional_links:
#- title: itsgoingto.be
#  icon: fas fa-globe
#  url: https://www.itsgoingto.be
# - title: another link
#   icon: font awesome brand icon name (eg. fab fa-twitter) (https://fontawesome.com/icons?d=gallery&m=free)
#   url: Link url (eg. https://google.com)

# Google Analytics and Tag Manager
# Using more than one of these may cause issues with reporting
gtm: "G-2HNCVHLKNS"
# gtag: "UA-00000000-0"
# google_analytics: "UA-00000000-0"

# About Section
# about_title: About Me
about_profile_image: images/profile.jpg
about_content: | # this will include new lines to allow paragraphs
  백엔드 개발자로  NestJS, SpringBoot, Django, Flask를 활용한 API 서버를 개발 및 배포한 경험이 있습니다. 
  Docker, AWS EC2, S3 등의 기술을 활용하여 서비스를 개발하였습니다. NextJS, React, TailwindCSS를 활용하여 프론트엔드 또한 구성하였던 경험이 있습니다.

  새로운 기술 및 지식을 습득하고, 프로젝트 개발 혹은 기획 과정에 적용하여 최적화하는 것을 선호합니다. 
  팀 프로젝트, 인턴쉽에서 서비스를 기획, 개발, 배포하였습니다.

  반복되는 프로세스를 코드를 통해 자동화하는 것을 좋아합니다. 프로젝트 환경 세팅의 자동화를 통해 프로젝트 세팅에 소요되는 시간을 개선한 경험이 있습니다.

content:
  - title: Experience # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: Entropy Paradox
        link: entropyparadox.com
        # link_text: boringcompany.com
        sub_title: NodeJS 서버 & React 개발자
        caption: 2021.05 - 현재
        quote: >
          스타트업 웹/앱 MVP 솔루션 & 자체 서비스 기업
        description: | # this will include new lines to allow paragraphs
          - NestJS, TypeORM, NextJS, React, PostgreSQL, MySQL을 사용한 개발 경험
          - 웹 MVP 프로젝트 개발

  - title: Projects # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: top-middle
        title: 마담주
        link: madamjoo.com
        caption: 2023.01 - 현재
        quote: >
          과일 부티크 온라인 스토어<br/>
          사용 기술 : NestJs, TypeORM, PostgreSQL, Liquibase, NextJs, React, Docker, AWS (EC2, ECR, ELB, S3, RDS), Vercel
        description: |
          NestJs 모노레포 기반의 백엔드 개발
          - NestJs CRUD 패키지를 사용한 API 서버 구축
          - Liquibase를 통한 DB 스키마 버전 관리
          - firebase 기반의 푸시알림 로직을 플레어레인 API 기반 푸시 알림으로 리팩토링
          
          NextJs 기반 프론트엔드 개발
          - PWA 구축

      - layout: top-middle
        title: 바나나 파츠
        link: banana.parts
        caption: 2022.11 - 현재
        quote: >
          부품 견적 간소화 플랫폼<br/>
          사용 기술 : NestJs, TypeORM, MySQL, Redis, Docker, AWS (EC2, S3, Amplify, RDS), Vercel
        description: |
          NestJs 모노레포 기반의 백엔드 개발
          - NestJs 기반의 Http 메소드를 활용한 CRUD API 서버
          - Redis Queue를 사용한 순차 처리 적용
          - TDD 적용을 통한 테스트 기반 개발 도입
          - Swagger를 사용한 HTTP API 문서화
          
          스테이지 서버 및 프로덕션 서버 AWS 세팅
          - AWS Amplify, Vercel을 사용한 프론트 자동 배포
          - Github Action를 통한 백엔드 AWS EC2 자동 배포
          - Worker Instance, API Instance의 분리를 통한 고가용성 확보

      - layout: top-middle
        title: 어디가지
        link: where.review
        caption: 2022.09 - 현재
        quote: >
          유저가 만드는 맛집 지도 플랫폼 <br/>
          사용 기술 : NestJs, TypeORM, PostgresSQL, Liquibase, Docker, GraphQL
        description: |
          NestJs 기반의 백엔드 추가 개발
          - Liquibase를 통한 DB 스키마 버전 관리
          - GraphQL을 사용한 CRUD API 구현
          - 서브쿼리 사용을 통한 조회 쿼리 개선
          - 현재 위치의 위도/경도 기준으로 주변 장소 조회 기능 구현

      - layout: top-middle
        title: 아이힐미 헬릭스
        link: play.google.com/store/apps/details?id=com.ihealmeapp
        caption: 2022.04 - 현재
        quote: >
          건강 습관 관리 플랫폼 <br/>
          사용 기술 : NestJs, TypeORM, MySQL, AWS (EC2, S3, Amplify, RDS), NHN cloud(sms), OneSignal(Push 알림)
        description: |
          NestJs 모노레포 기반의 백엔드 개발
          - NestJs 기반의 Http 메소드를 활용한 CRUD API 서버
          - Swagger를 사용한 HTTP API 문서화
          - AWS S3를 활용한 이미지 업로드 API
          - NHN cloud를 사용한 sms 전화번호 인증 API
          - TypeORM를 활용한 DB Entity
          - NestJs @Cron과 OneSignal Push Noti를 사용한 정기 푸시 알림

          스테이지 서버 및 프로덕션 서버 AWS 세팅
          - AWS Amplify를 사용한 프론트 자동 배포
          - Github Action를 통한 백엔드 AWS EC2 자동 배포

      - layout: top-middle
        title: 링크스토리
        link: linkstory.me
        caption: 2022.03 - 2023.01
        quote: >
          해외 대학생 멘토링 플랫폼 <br/>
          사용 기술 : NestJs, TypeORM, MySQL, React, AWS (EC2, S3, SES, ELB), Stripe
        description: |
          NestJs 기반의 백엔드 리팩토링 & 추가 개발
          - NestJS 7 버전 기반의 백엔드 8 버전으로 마이그레이션
          - 7 버전 기준의 레거시 8 버전으로 리팩토링
          - Socket을 사용한 중복 로그인 방지 기능 추가
          - Stripe API를 활용하여 어드민 쿠폰 대시보드와 연동
          - Stripe API 결제시 쿠폰 동시성 이슈 해결
          - HTTP 메소드를 사용한 CRUD API 서버

          React를 활용하여 웹 클라이언트 개발

      - layout: top-middle
        title: 슈퍼스터디
        link: superstudy.kr
        caption: 2022.01 - 2022.07
        quote: >
          학교 생활 종합 플랫폼 <br/>
          사용 기술 : NestJs, TypeORM, PostgresSQL, React, AWS(S3)
        description: |
          NestJs 기반의 <mark>백엔드 레거시 리팩토링</mark>
            - 기존의 GraphQL로 구성되어있던 레거시 중 조회되는 테이블 수가 3개 이상인 쿼리를 TypeORM Query Builder를 사용하여 HTTP 메소드 기반의 API 형식으로 리팩토링
            - <mark>쿼리 실행 계획의 시각화</mark>를 통한 쿼리 개선
            - 조회되는 테이블 수가 3개 이하인 쿼리 중 <mark> 1 대 N의 관계로 인해 발생되는 슬로우 쿼리</mark>를 Data Loader 적용으로 <mark>1번의 쿼리로 개선</mark>
            - 프론트에서 처리하던 데이터 정렬/필터 로직을 백엔드 쿼리 정렬/필터링 방식으로 전환하여 <mark>프론트엔드 성능 개선</mark> (로딩 시간 3초 개선)

          NestJS 기반의 백엔드 추가 개발
            - Http 메소드를 사용한 CRUD API 서버
            - GraphQL Resolver 수정
            - AWS S3를 활용한 Presigned 방식의 이미지 업로드

          React를 활용하여 웹 클라이언트 개발

      - layout: top-middle
        title: 아트앤하우스
        link: artnhouse.com
        caption: 2021.08 - 2022.01
        quote: >
          인테리어 사진 및 가구 정보를 공유하는 커뮤니티 플랫폼<br/>
          사용 기술 : NestJs, TypeORM, PostgresSQL, React, AWS(EC2, S3, SES)
        description: |
          NestJs 기반의 백엔드 개발
          - NestJs 기반의 Http 메소드를 활용한 CRUD API 서버
          - AWS S3를 활용한 이미지 업로드 API
          - AWS SES를 활용한 비밀번호 찾기 이메일 전송 API
          - TypeORM를 활용한 DB Entity
          - NestJs @Cron과 비즈엠을 활용한 알림톡 기능

          React를 활용하여 웹 클라이언트 개발
          - 업로드된 이미지 위에 클릭한 좌표에 맞게 핀 고정 기능 구현

      - layout: top-middle
        title: PickUp(픽업)
        caption: 2021.05 - 2021.08
        quote: >
          익명 유저들이 올린 퀴즈를 맞추고, 맞춘 횟수에 따라 프로필 오픈, 팔로우, 채팅이 가능한 SNS<br/>
          사용 기술 : NestJs, TypeORM, PostgreSQL, React, AWS(EC2, S3, SES)
        description: |
          NestJs 기반의 백엔드 개발
          - NestJs & Http 메소드를 활용한 CRUD API 서버
          - AWS S3를 활용한 이미지 업로드 API
          - AWS SES를 활용한 비밀번호 찾기 이메일 전송 API
          - TypeORM을 활용한 DB Entity
          - NestJs @Cron과 비즈엠을 활용한 알림톡 기능

          React, React Native를 통한 웹 앱 개발
          - Firebase를 통한 푸시 알림 구현

      - layout: top-middle
        title: MaskOn(마스크온)
        link: github.com/Team-Mask-On
        caption:
          2021.01 - 2021.03
          # link_text: Project Website
        additional_links:
          - title: Team-Mask-On/Mask_On
            icon: fab fa-github
            url: github.com/Team-Mask-On/Mask_On
        quote: >
          코로나-19 매장내 마스크 착용률 정보를 5분마다 측정하여 매장별로 정리하여 유저에게 제공하는 플랫폼<br/>
          사용 기술 : Django, Docker, MySQL, AWS(RDS, EC2, Elastic Beanstalk), Grafana, Prometheus
        description: | # this will include new lines to allow paragraphs
          IoT 기반의 PiCamera를 통한 AI 기술을 활용한 Django 기반 API 서버 개발 및 배포
          - Django/ Docker/ Docker-compose를 활용하여 API 서버 개발
          - DjangoRestFramework를 이용하여 RaspberryPi에서 OpenCV와 YOLOv5를 통해 이미지에서 산출한 로그 및 센서 정보 송수신 구현
          - Django API 서버를 Gunicorn을 활용하여 AWS EC2에 Docker 이미지로 배포
          - AWS EC2에 배포된 서버에 Prometheus와 Grafana를 연동
          - Postman을 통한 API document 작성을 통한 API 문서화(postman)

      - layout: top-middle
        title: 쉐어하우스 정보 제공 서비스(Modeul)
        link: github.com/MO-DEUL
        caption: 2020.04 - 2021.02
        additional_links:
          - title: MO-DEUL/Mo_DEUL
            icon: fab fa-github
            url: github.com/MO-DEUL/Mo_DEUL
        quote: >
          단국대 주변 쉐어하우스 임대 업자와 수요자 사이에서 필요 정보를 제공해주는 서비스<br/>
          사용 기술 : Django, Docker, MySQL
        description: |
          Django 기반의 <mark>백엔드 개발</mark>
          - Django / Docker 기반의 CRUD 기능 중심의 API 서버 개발
          - DjangoRestFramework를 활용하여  쉐어하우스 정보 게시판, 호스트 정보, 쉐어하우스 상세 정보 제공 기능 API 구현
          - Django-seed와 Faker를 통한 개발용 fake db 생성 커맨드 구현
  - title: Skill
    layout: list
    content:
      - layout: left
        title: Backend
        description: |
          - TypeScript, Python
          - NestJs, Django, Flask
          - TypeORM
          - socket.io
      - layout: left
        title: DevOps
        description: |
          - MySQL, PostgreSQL
          - AWS S3, EC2, ELB, Cloud Watch, Amplify
          - Docker, Docker-compose
          - Prometheus, Grafana
          - Github Action
      - layout: left
        title: Frontend
        description: |
          - TypeScript
          - Npm, Yarn
          - ReactJS
          - NextJS
          - TailwindCSS
  - title: Education # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: 단국대학교
        caption: 2020 - 현재(3학년 1학기 휴학중)
        sub_title: 모바일 시스템 공학과
      #        quote: >
      #        description: | # this will include new lines to allow paragraphs
      - layout: left
        title: 2021 SiliconValley HeadStarts InternShip
        caption: 2021.01.04 - 02.05
        sub_title: https://github.com/Team-Mask-On
        quote: >
          실리콘 밸리에 재직중인 Andrew Park 님 주관의 인턴쉽 및 세미나
        description: |
          - 프론트부터 백엔드, 모니터링, 배포까지 엔드-투-엔드로 진행

# Footer
footer_show_references: true
# references_title: References on request (Override references text)

# Build settings
remote_theme: sproogen/resume-theme

sass:
  sass_dir: _sass
  style: compressed

plugins:
  - jekyll-seo-tag
